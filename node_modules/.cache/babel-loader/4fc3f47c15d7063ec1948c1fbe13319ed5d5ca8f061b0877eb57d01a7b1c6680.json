{"ast":null,"code":"// src/SimpleMdeReact.tsx\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport SimpleMDE from \"easymde\";\nvar _id = 0;\nvar generateId = () => `simplemde-editor-${++_id}`;\nvar useHandleEditorInstanceLifecycle = ({\n  options,\n  id,\n  currentValueRef,\n  textRef\n}) => {\n  const [editor, setEditor] = useState(null);\n  const imageUploadCallback = useCallback((file, onSuccess, onError) => {\n    const imageUpload = options == null ? void 0 : options.imageUploadFunction;\n    if (imageUpload) {\n      const _onSuccess = url => {\n        onSuccess(url);\n      };\n      imageUpload(file, _onSuccess, onError);\n    }\n  }, [options == null ? void 0 : options.imageUploadFunction]);\n  const editorRef = useRef(editor);\n  editorRef.current = editor;\n  useEffect(() => {\n    let editor2;\n    if (textRef) {\n      const initialOptions = {\n        element: textRef,\n        initialValue: currentValueRef.current\n      };\n      const imageUploadFunction = (options == null ? void 0 : options.imageUploadFunction) ? imageUploadCallback : void 0;\n      editor2 = new SimpleMDE(Object.assign({}, initialOptions, options, {\n        imageUploadFunction\n      }));\n      setEditor(editor2);\n    }\n    return () => {\n      editor2 == null ? void 0 : editor2.toTextArea();\n      editor2 == null ? void 0 : editor2.cleanup();\n    };\n  }, [textRef, currentValueRef, id, imageUploadCallback, options]);\n  const codemirror = useMemo(() => {\n    return editor == null ? void 0 : editor.codemirror;\n  }, [editor == null ? void 0 : editor.codemirror]);\n  return {\n    editor,\n    codemirror\n  };\n};\nvar SimpleMdeReact = React.forwardRef((props, ref) => {\n  const {\n    events,\n    value,\n    options,\n    children,\n    extraKeys,\n    getLineAndCursor,\n    getMdeInstance,\n    getCodemirrorInstance,\n    onChange,\n    id: anId,\n    placeholder,\n    textareaProps,\n    ...rest\n  } = props;\n  const id = useMemo(() => anId ?? generateId(), [anId]);\n  const elementWrapperRef = useRef(null);\n  const nonEventChangeRef = useRef(true);\n  const currentValueRef = useRef(value);\n  currentValueRef.current = value;\n  const [textRef, setTextRef] = useState(null);\n  const {\n    editor,\n    codemirror\n  } = useHandleEditorInstanceLifecycle({\n    options,\n    id,\n    currentValueRef,\n    textRef\n  });\n  useEffect(() => {\n    if (nonEventChangeRef.current) {\n      editor == null ? void 0 : editor.value(value ?? \"\");\n    }\n    nonEventChangeRef.current = true;\n  }, [editor, value]);\n  const onCodemirrorChangeHandler = useCallback((_, changeObject) => {\n    if ((editor == null ? void 0 : editor.value()) !== currentValueRef.current) {\n      nonEventChangeRef.current = false;\n      onChange == null ? void 0 : onChange((editor == null ? void 0 : editor.value()) ?? \"\", changeObject);\n    }\n  }, [editor, onChange]);\n  useEffect(() => {\n    if (options == null ? void 0 : options.autofocus) {\n      codemirror == null ? void 0 : codemirror.focus();\n      codemirror == null ? void 0 : codemirror.setCursor(codemirror == null ? void 0 : codemirror.lineCount(), 0);\n    }\n  }, [codemirror, options == null ? void 0 : options.autofocus]);\n  const getCursorCallback = useCallback(() => {\n    codemirror && (getLineAndCursor == null ? void 0 : getLineAndCursor(codemirror.getDoc().getCursor()));\n  }, [codemirror, getLineAndCursor]);\n  useEffect(() => {\n    getCursorCallback();\n  }, [getCursorCallback]);\n  useEffect(() => {\n    editor && (getMdeInstance == null ? void 0 : getMdeInstance(editor));\n  }, [editor, getMdeInstance]);\n  useEffect(() => {\n    codemirror && (getCodemirrorInstance == null ? void 0 : getCodemirrorInstance(codemirror));\n  }, [codemirror, getCodemirrorInstance, getMdeInstance]);\n  useEffect(() => {\n    if (extraKeys && codemirror) {\n      codemirror.setOption(\"extraKeys\", Object.assign({}, codemirror.getOption(\"extraKeys\"), extraKeys));\n    }\n  }, [codemirror, extraKeys]);\n  useEffect(() => {\n    var _a;\n    const toolbarNode = (_a = elementWrapperRef.current) == null ? void 0 : _a.getElementsByClassName(\"editor-toolbarNode\")[0];\n    const handler = codemirror && onCodemirrorChangeHandler;\n    if (handler) {\n      toolbarNode == null ? void 0 : toolbarNode.addEventListener(\"click\", handler);\n      return () => {\n        toolbarNode == null ? void 0 : toolbarNode.removeEventListener(\"click\", handler);\n      };\n    }\n    return () => {};\n  }, [codemirror, onCodemirrorChangeHandler]);\n  useEffect(() => {\n    codemirror == null ? void 0 : codemirror.on(\"change\", onCodemirrorChangeHandler);\n    codemirror == null ? void 0 : codemirror.on(\"cursorActivity\", getCursorCallback);\n    return () => {\n      codemirror == null ? void 0 : codemirror.off(\"change\", onCodemirrorChangeHandler);\n      codemirror == null ? void 0 : codemirror.off(\"cursorActivity\", getCursorCallback);\n    };\n  }, [codemirror, getCursorCallback, onCodemirrorChangeHandler]);\n  const prevEvents = useRef(events);\n  useEffect(() => {\n    const isNotFirstEffectRun = events !== prevEvents.current;\n    isNotFirstEffectRun && prevEvents.current && Object.entries(prevEvents.current).forEach(([event, handler]) => {\n      handler && (codemirror == null ? void 0 : codemirror.off(event, handler));\n    });\n    events && Object.entries(events).forEach(([event, handler]) => {\n      handler && (codemirror == null ? void 0 : codemirror.on(event, handler));\n    });\n    prevEvents.current = events;\n    return () => {\n      events && Object.entries(events).forEach(([event, handler]) => {\n        handler && (codemirror == null ? void 0 : codemirror.off(event, handler));\n      });\n    };\n  }, [codemirror, events]);\n  return /* @__PURE__ */React.createElement(\"div\", {\n    id: `${id}-wrapper`,\n    ...rest,\n    ref: aRef => {\n      if (typeof ref === \"function\") {\n        ref(aRef);\n      } else if (ref) {\n        ref.current = aRef;\n      }\n      elementWrapperRef.current = aRef;\n    }\n  }, /* @__PURE__ */React.createElement(\"textarea\", {\n    ...textareaProps,\n    id,\n    placeholder,\n    ref: setTextRef,\n    style: {\n      display: \"none\"\n    }\n  }));\n});\nSimpleMdeReact.displayName = \"SimpleMdeReact\";\nvar SimpleMdeReact_default = SimpleMdeReact;\nexport { SimpleMdeReact, SimpleMdeReact_default as default };","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","SimpleMDE","_id","generateId","useHandleEditorInstanceLifecycle","options","id","currentValueRef","textRef","editor","setEditor","imageUploadCallback","file","onSuccess","onError","imageUpload","imageUploadFunction","_onSuccess","url","editorRef","current","editor2","initialOptions","element","initialValue","Object","assign","toTextArea","cleanup","codemirror","SimpleMdeReact","forwardRef","props","ref","events","value","children","extraKeys","getLineAndCursor","getMdeInstance","getCodemirrorInstance","onChange","anId","placeholder","textareaProps","rest","elementWrapperRef","nonEventChangeRef","setTextRef","onCodemirrorChangeHandler","_","changeObject","autofocus","focus","setCursor","lineCount","getCursorCallback","getDoc","getCursor","setOption","getOption","_a","toolbarNode","getElementsByClassName","handler","addEventListener","removeEventListener","on","off","prevEvents","isNotFirstEffectRun","entries","forEach","event","createElement","aRef","style","display","displayName","SimpleMdeReact_default"],"sources":["/Users/stevegrant/Downloads/rubric-app-styled-v8_2/node_modules/react-simplemde-editor/src/SimpleMdeReact.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport SimpleMDE, { Options } from \"easymde\";\n\nimport type { Editor, EditorEventMap, KeyMap, Position } from \"codemirror\";\nimport { EditorChange } from \"codemirror\";\n\nlet _id = 0;\n\nconst generateId = () => `simplemde-editor-${++_id}`;\n\nexport type DOMEvent =\n  | \"mousedown\"\n  | \"dblclick\"\n  | \"touchstart\"\n  | \"contextmenu\"\n  | \"keydown\"\n  | \"keypress\"\n  | \"keyup\"\n  | \"cut\"\n  | \"copy\"\n  | \"paste\"\n  | \"dragstart\"\n  | \"dragenter\"\n  | \"dragover\"\n  | \"dragleave\"\n  | \"drop\";\n\nexport type CopyEvents = {\n  [TKey in string &\n    DOMEvent &\n    keyof DocumentAndElementEventHandlersEventMap as `${TKey}`]?: (\n    instance: Editor,\n    event: DocumentAndElementEventHandlersEventMap[TKey]\n  ) => void;\n};\n\nexport type GlobalEvents = {\n  [TKey in string &\n    DOMEvent &\n    keyof GlobalEventHandlersEventMap as `${TKey}`]?: (\n    instance: Editor,\n    event: GlobalEventHandlersEventMap[TKey]\n  ) => void;\n};\n\nexport type DefaultEvent = (instance: Editor, ...args: any[]) => void;\n\nexport type IndexEventsSignature = {\n  [key: string]: DefaultEvent | undefined;\n};\n\nexport interface SimpleMdeToCodemirrorEvents\n  extends CopyEvents,\n    GlobalEvents,\n    IndexEventsSignature,\n    Partial<EditorEventMap> {}\n\nexport type GetMdeInstance = (instance: SimpleMDE) => void;\nexport type GetCodemirrorInstance = (instance: Editor) => void;\nexport type GetLineAndCursor = (instance: Position) => void;\n\nexport interface SimpleMDEReactProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onChange\"> {\n  id?: string;\n  onChange?: (value: string, changeObject?: EditorChange) => void;\n  value?: string;\n  extraKeys?: KeyMap;\n  options?: SimpleMDE.Options;\n  events?: SimpleMdeToCodemirrorEvents;\n  getMdeInstance?: GetMdeInstance;\n  getCodemirrorInstance?: GetCodemirrorInstance;\n  getLineAndCursor?: GetLineAndCursor;\n  placeholder?: string;\n  textareaProps?: Omit<\n    React.HTMLAttributes<HTMLTextAreaElement>,\n    \"id\" | \"style\" | \"placeholder\"\n  >;\n}\n\nconst useHandleEditorInstanceLifecycle = ({\n  options,\n  id,\n  currentValueRef,\n  textRef,\n}: {\n  options?: Options;\n  id: string;\n  currentValueRef: React.MutableRefObject<string | undefined>;\n  textRef: HTMLTextAreaElement | null;\n}) => {\n  const [editor, setEditor] = useState<SimpleMDE | null>(null);\n\n  const imageUploadCallback = useCallback(\n    (\n      file: File,\n      onSuccess: (url: string) => void,\n      onError: (error: string) => void\n    ) => {\n      const imageUpload = options?.imageUploadFunction;\n      if (imageUpload) {\n        const _onSuccess = (url: string) => {\n          onSuccess(url);\n        };\n        imageUpload(file, _onSuccess, onError);\n      }\n    },\n    [options?.imageUploadFunction]\n  );\n\n  const editorRef = useRef(editor);\n  editorRef.current = editor;\n\n  useEffect(() => {\n    let editor: SimpleMDE;\n    if (textRef) {\n      const initialOptions = {\n        element: textRef,\n        initialValue: currentValueRef.current,\n      };\n      const imageUploadFunction = options?.imageUploadFunction\n        ? imageUploadCallback\n        : undefined;\n      editor = new SimpleMDE(\n        Object.assign({}, initialOptions, options, {\n          imageUploadFunction,\n        })\n      );\n      setEditor(editor);\n    }\n    return () => {\n      editor?.toTextArea();\n      editor?.cleanup();\n    };\n  }, [textRef, currentValueRef, id, imageUploadCallback, options]);\n\n  const codemirror = useMemo(() => {\n    return editor?.codemirror;\n  }, [editor?.codemirror]) as Editor | undefined;\n  return { editor, codemirror };\n};\n\nexport const SimpleMdeReact = React.forwardRef<\n  HTMLDivElement,\n  SimpleMDEReactProps\n>((props, ref) => {\n  const {\n    events,\n    value,\n    options,\n    children,\n    extraKeys,\n    getLineAndCursor,\n    getMdeInstance,\n    getCodemirrorInstance,\n    onChange,\n    id: anId,\n    placeholder,\n    textareaProps,\n    ...rest\n  } = props;\n\n  const id = useMemo(() => anId ?? generateId(), [anId]);\n\n  const elementWrapperRef = useRef<HTMLDivElement | null>(null);\n  const nonEventChangeRef = useRef<boolean>(true);\n\n  // This is to not pass value as a dependency e.g. to keep event handlers referentially\n  // stable and do not `off` and `on` on each value change\n  // plus to avoid unnecessary EasyEde editor recreation on each value change while still, if it has to be remounted\n  // due to options and other deps change, to preserve that last value and not the default one from the first render.\n  const currentValueRef = useRef(value);\n  currentValueRef.current = value;\n\n  const [textRef, setTextRef] = useState<HTMLTextAreaElement | null>(null);\n  const { editor, codemirror } = useHandleEditorInstanceLifecycle({\n    options,\n    id,\n    currentValueRef,\n    textRef,\n  });\n\n  useEffect(() => {\n    // If change comes from the event we don't need to update `SimpleMDE` value as it already has it\n    // Otherwise we shall set it as it comes from `props` set from the outside. E.g. by some reset button and whatnot\n    if (nonEventChangeRef.current) {\n      editor?.value(value ?? \"\");\n    }\n    nonEventChangeRef.current = true;\n  }, [editor, value]); //  _: Editor | Event <===== is to please TS :)\n  const onCodemirrorChangeHandler = useCallback(\n    (_: Editor | Event, changeObject?: EditorChange) => {\n      if (editor?.value() !== currentValueRef.current) {\n        nonEventChangeRef.current = false;\n        onChange?.(editor?.value() ?? \"\", changeObject);\n      }\n    },\n    [editor, onChange]\n  );\n\n  useEffect(() => {\n    // For some reason it doesn't work out of the box, this makes sure it's working correctly\n    if (options?.autofocus) {\n      codemirror?.focus();\n      codemirror?.setCursor(codemirror?.lineCount(), 0);\n    }\n  }, [codemirror, options?.autofocus]);\n\n  const getCursorCallback = useCallback(() => {\n    // https://codemirror.net/doc/manual.html#api_selection\n    codemirror && getLineAndCursor?.(codemirror.getDoc().getCursor());\n  }, [codemirror, getLineAndCursor]);\n\n  useEffect(() => {\n    getCursorCallback();\n  }, [getCursorCallback]);\n\n  useEffect(() => {\n    editor && getMdeInstance?.(editor);\n  }, [editor, getMdeInstance]);\n\n  useEffect(() => {\n    codemirror && getCodemirrorInstance?.(codemirror);\n  }, [codemirror, getCodemirrorInstance, getMdeInstance]);\n\n  useEffect(() => {\n    // https://codemirror.net/doc/manual.html#option_extraKeys\n    if (extraKeys && codemirror) {\n      codemirror.setOption(\n        \"extraKeys\",\n        Object.assign({}, codemirror.getOption(\"extraKeys\"), extraKeys)\n      );\n    }\n  }, [codemirror, extraKeys]);\n\n  useEffect(() => {\n    const toolbarNode =\n      elementWrapperRef.current?.getElementsByClassName(\n        \"editor-toolbarNode\"\n      )[0];\n    const handler = codemirror && onCodemirrorChangeHandler;\n    if (handler) {\n      toolbarNode?.addEventListener(\"click\", handler);\n      return () => {\n        toolbarNode?.removeEventListener(\"click\", handler);\n      };\n    }\n    return () => {};\n  }, [codemirror, onCodemirrorChangeHandler]);\n\n  useEffect(() => {\n    codemirror?.on(\"change\", onCodemirrorChangeHandler);\n    codemirror?.on(\"cursorActivity\", getCursorCallback);\n    return () => {\n      codemirror?.off(\"change\", onCodemirrorChangeHandler);\n      codemirror?.off(\"cursorActivity\", getCursorCallback);\n    };\n  }, [codemirror, getCursorCallback, onCodemirrorChangeHandler]);\n\n  const prevEvents = useRef(events);\n\n  useEffect(() => {\n    const isNotFirstEffectRun = events !== prevEvents.current;\n    isNotFirstEffectRun &&\n      prevEvents.current &&\n      Object.entries(prevEvents.current).forEach(([event, handler]) => {\n        handler && codemirror?.off(event as keyof EditorEventMap, handler);\n      });\n\n    events &&\n      Object.entries(events).forEach(([event, handler]) => {\n        handler && codemirror?.on(event as keyof EditorEventMap, handler);\n      });\n    prevEvents.current = events;\n    return () => {\n      events &&\n        Object.entries(events).forEach(([event, handler]) => {\n          handler && codemirror?.off(event as keyof EditorEventMap, handler);\n        });\n    };\n  }, [codemirror, events]);\n\n  return (\n    <div\n      id={`${id}-wrapper`}\n      {...rest}\n      ref={(aRef) => {\n        if (typeof ref === \"function\") {\n          ref(aRef);\n        } else if (ref) {\n          ref.current = aRef;\n        }\n        elementWrapperRef.current = aRef;\n      }}\n    >\n      <textarea\n        {...textareaProps}\n        id={id}\n        placeholder={placeholder}\n        ref={setTextRef}\n        style={{ display: \"none\" }}\n      />\n    </div>\n  );\n});\n\nSimpleMdeReact.displayName = \"SimpleMdeReact\";\n\nexport default SimpleMdeReact;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}